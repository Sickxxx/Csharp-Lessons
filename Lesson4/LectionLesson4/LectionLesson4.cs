// Первое и главное — как задаются двумерные массивы. По аналогии с одномерными массивами мы
// указываем тип данных (например, string), в квадратных скобках ставим запятую как показатель того,
// что у нас будет две размерности: первая — строки, вторая — столбцы. Потом даём массиву название
// (например, table). После этого пишем new string и указываем, какое количество строчек и столбцов
// нам нужно.
//   string[,] table = new string[2,3]
// В первом примере задан массив строк (можно сказать, что это таблица из строк). Но можно задать и
// прямоугольную таблицу чисел, которую в математике обычно называют матрицей. В квадратных
// скобках также первым числом мы обозначаем количество строк, которые будут в нашем двумерном
// массиве, а вторым числом указываем количество столбцов.
//   Int[,] matrix = new int[5,8]
// Давайте немного попишем код и посмотрим, что у нас получится. 
void PrintArray()
{
string[,] table = new string[2,5];
// String.Empty
// table [0,0] table [0,1] table [0,2] table [0,4]
// table [1,0] table [1,1] table [1,2] table [1,4]
table[1, 2] = "слово";
for (int rows = 0; rows < 2; rows++)
{
 for (int columns = 0; columns < 5; columns++)
 {
 Console.WriteLine($"{table[rows, columns]}");
 }
}
}
// . А вот в момент, когда вы будете работать, например, в циклах или методах,
// можно получить количество строк и другим способом. Для тройки указываем имя массива и новый
// функционал GetLength(0). 0 в качестве аргумента означает количество строк. Аналогично и для
// четвёрки: пишем имя массива, точку и GetLength(1).
void FactorialRecursion()
{
    int Factorial(int n)
{
 // 1! = 1
 // 0! = 1
 if(n == 1) return 1;
 else return n * Factorial(n-1);
}
Console.WriteLine(Factorial(3)); // 1 * 2 * 3 = 6
}